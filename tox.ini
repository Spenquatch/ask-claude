# Tox configuration for multi-environment testing
[tox]
envlist = py{310,311,312}, lint, type, coverage
isolated_build = True
skip_missing_interpreters = True

[testenv]
description = Run unit tests with pytest
deps =
    poetry
commands_pre =
    poetry install --no-interaction
commands =
    poetry run pytest {posargs:tests/}

[testenv:coverage]
description = Run tests with coverage report
deps =
    poetry
commands_pre =
    poetry install --no-interaction
commands =
    poetry run pytest --cov=ask_claude --cov-report=term-missing --cov-report=html --cov-report=xml {posargs:tests/}

[testenv:lint]
description = Run linting with ruff
deps =
    poetry
commands_pre =
    poetry install --no-interaction
commands =
    poetry run ruff check ask_claude/
    poetry run ruff format --check ask_claude/

[testenv:type]
description = Run type checking with mypy
deps =
    poetry
commands_pre =
    poetry install --no-interaction
commands =
    poetry run mypy ask_claude/

[testenv:format]
description = Format code with ruff
deps =
    poetry
commands_pre =
    poetry install --no-interaction
commands =
    poetry run ruff check --fix ask_claude/
    poetry run ruff format ask_claude/

[testenv:all]
description = Run all checks (tests, lint, type, coverage)
deps =
    poetry
commands_pre =
    poetry install --no-interaction
commands =
    poetry run pytest --cov=ask_claude --cov-report=term-missing
    poetry run ruff check ask_claude/
    poetry run mypy ask_claude/

# Test configuration
[pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Coverage configuration
[coverage:run]
source = ask_claude
omit =
    */tests/*
    */__init__.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*Protocol.*:
    @(abc\\.)?abstractmethod
