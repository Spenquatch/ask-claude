# requirements.txt - Production dependencies
# Core dependencies for Claude Code SDK Wrapper

# No external dependencies required - uses only Python standard library
# The wrapper is designed to be dependency-free for maximum compatibility

# Optional: If you want enhanced logging
# structlog>=23.1.0

# Optional: If you want configuration validation
# pydantic>=2.0.0

# Optional: If you want async support
# asyncio-compat>=0.1.2

# Optional: For enhanced JSON handling
# orjson>=3.8.0

# requirements-dev.txt - Development dependencies
# Development and testing dependencies

# Testing framework
pytest>=7.4.0
pytest-cov>=4.1.0
pytest-mock>=3.11.1
pytest-asyncio>=0.21.1
pytest-xdist>=3.3.1

# Code quality
black>=23.7.0
flake8>=6.0.0
mypy>=1.5.1
isort>=5.12.0
bandit>=1.7.5

# Documentation
sphinx>=7.1.2
sphinx-rtd-theme>=1.3.0
sphinx-autodoc-typehints>=1.24.0

# Development utilities
pre-commit>=3.3.3
watchdog>=3.0.0
ipython>=8.14.0
jupyter>=1.0.0

# Performance testing
pytest-benchmark>=4.0.0
memory-profiler>=0.61.0

# Security scanning
safety>=2.3.5
pip-audit>=2.6.1

# Build tools
build>=0.10.0
twine>=4.0.2

# requirements-prod.txt - Production with optional enhancements
# Production requirements with recommended optional dependencies

# Enhanced JSON performance
orjson>=3.8.0

# Better logging
structlog>=23.1.0
colorlog>=6.7.0

# Configuration validation
pydantic>=2.0.0
pydantic-settings>=2.0.0

# Monitoring and metrics
prometheus-client>=0.17.1
statsd>=4.0.1

# HTTP client for health checks
requests>=2.31.0

# Database support (if needed for logging/metrics)
sqlalchemy>=2.0.19

# requirements-minimal.txt - Absolute minimum for basic functionality
# Minimal requirements - uses only Python standard library
# No external dependencies required

# setup.py - Package setup configuration
from setuptools import setup, find_packages
import pathlib

here = pathlib.Path(__file__).parent.resolve()
long_description = (here / "README.md").read_text(encoding="utf-8")

setup(
    name="claude-code-wrapper",
    version="1.0.0",
    description="Enterprise-grade Python wrapper for Claude Code SDK",
    long_description=long_description,
    long_description_content_type="text/markdown",
    url="https://github.com/your-org/claude-code-wrapper",
    author="Your Organization",
    author_email="contact@your-org.com",
    classifiers=[
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Developers",
        "Topic :: Software Development :: Libraries :: Python Modules",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Operating System :: OS Independent",
    ],
    keywords="claude, ai, sdk, wrapper, enterprise, production",
    py_modules=["claude_code_wrapper", "claude_cli"],
    python_requires=">=3.9, <4",
    install_requires=[
        # No required dependencies - uses only standard library
    ],
    extras_require={
        "enhanced": [
            "orjson>=3.8.0",
            "structlog>=23.1.0",
            "pydantic>=2.0.0",
        ],
        "monitoring": [
            "prometheus-client>=0.17.1",
            "requests>=2.31.0",
        ],
        "dev": [
            "pytest>=7.4.0",
            "pytest-cov>=4.1.0",
            "black>=23.7.0",
            "flake8>=6.0.0",
            "mypy>=1.5.1",
        ],
    },
    entry_points={
        "console_scripts": [
            "claude-wrapper=claude_cli:main",
        ],
    },
    project_urls={
        "Bug Reports": "https://github.com/your-org/claude-code-wrapper/issues",
        "Source": "https://github.com/your-org/claude-code-wrapper/",
        "Documentation": "https://claude-wrapper.readthedocs.io/",
    },
)

# pyproject.toml - Modern Python packaging
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "claude-code-wrapper"
version = "1.0.0"
description = "Enterprise-grade Python wrapper for Claude Code SDK"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Your Organization", email = "contact@your-org.com"},
]
maintainers = [
    {name = "Your Organization", email = "contact@your-org.com"},
]
keywords = ["claude", "ai", "sdk", "wrapper", "enterprise", "production"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
dependencies = [
    # No required dependencies
]

[project.optional-dependencies]
enhanced = [
    "orjson>=3.8.0",
    "structlog>=23.1.0",
    "pydantic>=2.0.0",
]
monitoring = [
    "prometheus-client>=0.17.1",
    "requests>=2.31.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "flake8>=6.0.0",
    "mypy>=1.5.1",
    "pre-commit>=3.3.3",
]

[project.scripts]
claude-wrapper = "claude_cli:main"

[project.urls]
Homepage = "https://github.com/your-org/claude-code-wrapper"
Documentation = "https://claude-wrapper.readthedocs.io/"
Repository = "https://github.com/your-org/claude-code-wrapper.git"
"Bug Tracker" = "https://github.com/your-org/claude-code-wrapper/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["claude_*"]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["claude_code_wrapper", "claude_cli"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Makefile - Development automation
.PHONY: help install test lint format check build clean docker

help:  ## Show this help
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

install:  ## Install development dependencies
	pip install -r requirements-dev.txt
	pre-commit install

test:  ## Run tests
	pytest -v --cov=claude_code_wrapper --cov-report=html

test-fast:  ## Run fast tests only
	pytest -v -m "not slow"

lint:  ## Run linting
	flake8 .
	black --check .
	mypy claude_code_wrapper.py
	bandit -r . -x tests/

format:  ## Format code
	black .
	isort .

check: lint test  ## Run all checks

build:  ## Build package
	python -m build

clean:  ## Clean build artifacts
	rm -rf build/ dist/ *.egg-info/
	rm -rf .pytest_cache/ .coverage htmlcov/
	find . -type d -name __pycache__ -delete
	find . -type f -name "*.pyc" -delete

docker:  ## Build Docker image
	docker build -t claude-wrapper .

docker-dev:  ## Build development Docker image
	docker build -t claude-wrapper-dev --build-arg BUILD_ENV=development .

run-docker:  ## Run Docker container
	docker run -it --rm claude-wrapper

security:  ## Run security checks
	bandit -r . -x tests/
	safety check
	pip-audit

release:  ## Create a release (use with VERSION=x.y.z)
	@if [ -z "$(VERSION)" ]; then echo "Usage: make release VERSION=x.y.z"; exit 1; fi
	git tag v$(VERSION)
	git push origin v$(VERSION)
	python -m build
	twine upload dist/*